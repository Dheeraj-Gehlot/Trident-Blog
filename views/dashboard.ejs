<!-- views/dashboard.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .dashboard-container { display: flex; height: 100vh; }
    .sidebar { width: 220px; background: #222; color: #fff; padding: 30px 0; }
    .sidebar ul { list-style: none; padding: 0; }
    .sidebar li { padding: 18px 30px; cursor: pointer; }
    .sidebar li.active, .sidebar li:hover { background: #444; }
    .main-panel { flex: 1; background: #f7f7f7; padding: 40px; position: relative; }
    .top-bar { display: flex; justify-content: flex-end; align-items: center; margin-bottom: 30px; }
    .add-btn { background: #007bff; color: #fff; border: none; padding: 10px 22px; border-radius: 4px; cursor: pointer; font-size: 16px; }
    .add-btn:hover { background: #0056b3; }
    .blog-list { margin-top: 10px; }
    .blog-item { background: #fff; margin-bottom: 18px; padding: 18px 22px; border-radius: 6px; box-shadow: 0 1px 4px rgba(0,0,0,0.06); }
    .pagination { margin: 20px 0; display: flex; gap: 8px; }
    .pagination button { padding: 6px 14px; border: 1px solid #ccc; background: #fff; cursor: pointer; border-radius: 3px; }
    .pagination button.active { background: #007bff; color: #fff; border-color: #007bff; }
    .blog-form { background: #fff; padding: 28px 32px; border-radius: 8px; box-shadow: 0 1px 4px rgba(0,0,0,0.08); }
    .blog-form label { display: block; margin-bottom: 8px; font-weight: 500; }
    .blog-form input, .blog-form textarea { width: 100%; padding: 8px; margin-bottom: 18px; border: 1px solid #ccc; border-radius: 4px; }
    .blog-form button { background: #28a745; color: #fff; border: none; padding: 10px 22px; border-radius: 4px; cursor: pointer; font-size: 16px; }
    .blog-form button:hover { background: #218838; }
  </style>
</head>
<body>
  <div class="dashboard-container">
    <div class="sidebar">
      <ul>
        <li class="active" id="tab-blog">Blog</li>
        <li id="tab-category">Category</li>
      </ul>
    </div>
    <div class="main-panel">
      <div class="top-bar" id="blogTopBar">
        <button class="add-btn" id="addBlogBtn">Add</button>
      </div>
      <div class="top-bar" id="categoryTopBar" style="display:none;">
        <button class="add-btn" id="addCategoryBtn">Add</button>
      </div>
      <div id="blogListPanel" class="blog-list">
        <!-- Blog list will be rendered here -->
      </div>
      <div id="categoryListPanel" class="blog-list" style="display:none;"></div>
      <div id="paginationPanel" class="pagination"></div>
      <div id="blogFormPanel" style="display:none;">
        <%- include("partials/addBlogForm") %>
      </div>
      <div id="categoryFormPanel" style="display:none;">
        <%- include("partials/categoryForm") %>
      </div>
    </div>
  </div>
  <script>
    // Fetch blogs from API
    let blogs = [];
    let currentPage = 1;
    const blogsPerPage = 5;

    function getAuthHeaders() {
      const token = localStorage.getItem('token');
      return token ? { 'x-access-token': token } : {};
    }

    function handleAuthError(data) {
      if ((data && data.message && data.message.toLowerCase().includes('invalid token')) || (data && data.err && data.err.toLowerCase().includes('jwt expired'))) {
        localStorage.removeItem('token');
        window.location.href = '/';
        return true;
      }
      return false;
    }

    async function fetchBlogs() {
      try {
        const res = await fetch('/blog-list', {
          headers: getAuthHeaders()
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        blogs = data.blogs || [];
        renderBlogs();
      } catch (err) {
        document.getElementById('blogListPanel').innerHTML = '<div style="color:red">Failed to load blogs.</div>';
      }
    }

    function renderBlogs() {
      const start = (currentPage - 1) * blogsPerPage;
      const end = start + blogsPerPage;
      const pageBlogs = blogs.slice(start, end);
      const blogListPanel = document.getElementById('blogListPanel');
      blogListPanel.innerHTML = '';
      pageBlogs.forEach(blog => {
        const div = document.createElement('div');
        div.className = 'blog-item';
        div.innerHTML = `
          <h3>${blog.Title || blog.title}</h3>
          <p>${blog.Description || blog.content || ''}</p>
          <button onclick="deleteBlog('${blog._id}')" style="background:#dc3545;color:#fff;border:none;padding:6px 14px;border-radius:3px;float:right;">Delete</button>
          <button onclick="viewBlog('${blog._id}')" style="background:#17a2b8;color:#fff;border:none;padding:6px 14px;border-radius:3px;float:right;margin-right:8px;" title="View/Edit"><span style='font-size:16px;'>&#128065;</span></button>
        `;
        blogListPanel.appendChild(div);
      });
      renderPagination();
    }

    function renderPagination() {
      const totalPages = Math.ceil(blogs.length / blogsPerPage);
      const paginationPanel = document.getElementById('paginationPanel');
      paginationPanel.innerHTML = '';
      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement('button');
        btn.innerText = i;
        btn.className = (i === currentPage) ? 'active' : '';
        btn.onclick = () => { currentPage = i; renderBlogs(); };
        paginationPanel.appendChild(btn);
      }
    }

    document.getElementById('addBlogBtn').onclick = function() {
      document.getElementById('blogListPanel').style.display = 'none';
      document.getElementById('paginationPanel').style.display = 'none';
      document.getElementById('blogFormPanel').style.display = 'block';
    };
    document.getElementById('cancelBlogBtn').onclick = function() {
      document.getElementById('blogFormPanel').style.display = 'none';
      document.getElementById('blogListPanel').style.display = 'block';
      document.getElementById('paginationPanel').style.display = 'flex';
    };
    document.getElementById('createBlogForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      try {
        const res = await fetch('/create-blog', {
          method: 'POST',
          headers: getAuthHeaders(),
          body: formData
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        if (data.status) {
          form.reset();
          document.getElementById('blogFormPanel').style.display = 'none';
          document.getElementById('blogListPanel').style.display = 'block';
          document.getElementById('paginationPanel').style.display = 'flex';
          fetchBlogs();
        } else {
          alert((data.errors && data.errors[0] && data.errors[0].msg) || 'Failed to create blog');
        }
      } catch (err) {
        alert('Failed to create blog');
      }
    };

    async function deleteBlog(id) {
      if (!confirm('Are you sure you want to delete this blog?')) return;
      try {
        const res = await fetch(`/delete-blog?id=${id}`, {
          method: 'DELETE',
          headers: getAuthHeaders()
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        if (data.status) {
          fetchBlogs();
        } else {
          alert((data.errors && data.errors[0] && data.errors[0].msg) || 'Failed to delete blog');
        }
      } catch (err) {
        alert('Failed to delete blog');
      }
    }

    // Add viewBlog function for edit mode
    async function viewBlog(id) {
      try {
        const res = await fetch(`/view-blog?id=${id}`, {
          headers: getAuthHeaders()
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        if (data.status && data.blog) {
          // Show form and fill with blog data
          document.getElementById('blogListPanel').style.display = 'none';
          document.getElementById('paginationPanel').style.display = 'none';
          document.getElementById('blogFormPanel').style.display = 'block';
          // Fill form fields
          document.getElementById('title').value = data.blog.Title || '';
          document.getElementById('seo_meta_title').value = data.blog.Seo_Meta_Title || '';
          document.getElementById('heading').value = data.blog.Heading || '';
          document.getElementById('description').value = data.blog.Description || '';
          // Populate and select the correct category
          await window.populateCategoryDropdown();
          document.getElementById('category').value = data.blog.Category || '';
          // Store blog id for edit
          document.getElementById('createBlogForm').setAttribute('data-edit-id', data.blog._id);
          // Remove required from image for edit
          document.getElementById('image').removeAttribute('required');
        } else {
          alert((data.errors && data.errors[0] && data.errors[0].msg) || 'Failed to load blog');
        }
      } catch (err) {
        alert('Failed to load blog');
      }
    }

    // Update form submit for edit mode
    document.getElementById('createBlogForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const editId = form.getAttribute('data-edit-id');
      let url = '/create-blog';
      let method = 'POST';
      if (editId) {
        url = '/edit-blog';
        method = 'POST';
        formData.append('id', editId);
      }
      try {
        const res = await fetch(url, {
          method: method,
          headers: getAuthHeaders(),
          body: formData
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        if (data.status) {
          form.reset();
          form.removeAttribute('data-edit-id');
          document.getElementById('image').setAttribute('required', 'required');
          document.getElementById('blogFormPanel').style.display = 'none';
          document.getElementById('blogListPanel').style.display = 'block';
          document.getElementById('paginationPanel').style.display = 'flex';
          fetchBlogs();
        } else {
          alert((data.errors && data.errors[0] && data.errors[0].msg) || 'Failed to save blog');
        }
      } catch (err) {
        alert('Failed to save blog');
      }
    };

    // CATEGORY TAB LOGIC
    document.getElementById('tab-blog').onclick = function() {
      this.classList.add('active');
      document.getElementById('tab-category').classList.remove('active');
      document.getElementById('blogListPanel').style.display = 'block';
      document.getElementById('paginationPanel').style.display = 'flex';
      document.getElementById('blogTopBar').style.display = 'flex';
      document.getElementById('blogFormPanel').style.display = 'none';
      document.getElementById('categoryListPanel').style.display = 'none';
      document.getElementById('categoryTopBar').style.display = 'none';
      document.getElementById('categoryFormPanel').style.display = 'none';
    };
    document.getElementById('tab-category').onclick = function() {
      this.classList.add('active');
      document.getElementById('tab-blog').classList.remove('active');
      document.getElementById('blogListPanel').style.display = 'none';
      document.getElementById('paginationPanel').style.display = 'none';
      document.getElementById('blogTopBar').style.display = 'none';
      document.getElementById('blogFormPanel').style.display = 'none';
      document.getElementById('categoryListPanel').style.display = 'block';
      document.getElementById('categoryTopBar').style.display = 'flex';
      document.getElementById('categoryFormPanel').style.display = 'none';
      fetchCategories();
    };
    document.getElementById('addCategoryBtn').onclick = function() {
      document.getElementById('categoryListPanel').style.display = 'none';
      document.getElementById('categoryFormPanel').style.display = 'block';
    };
    document.getElementById('cancelCategoryBtn').onclick = function() {
      document.getElementById('categoryFormPanel').style.display = 'none';
      document.getElementById('categoryListPanel').style.display = 'block';
    };
    document.getElementById('createCategoryForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      try {
        const res = await fetch('/create-category', {
          method: 'POST',
          headers: getAuthHeaders(),
          body: formData
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        if (data.status) {
          form.reset();
          document.getElementById('categoryFormPanel').style.display = 'none';
          document.getElementById('categoryListPanel').style.display = 'block';
          fetchCategories();
        } else {
          alert((data.errors && data.errors[0] && data.errors[0].msg) || 'Failed to create category');
        }
      } catch (err) {
        alert('Failed to create category');
      }
    };
    async function fetchCategories() {
      try {
        const res = await fetch('/category-list', {
          headers: getAuthHeaders()
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        const panel = document.getElementById('categoryListPanel');
        if (data.status && data.categories) {
          panel.innerHTML = '';
          data.categories.forEach(cat => {
            const div = document.createElement('div');
            div.className = 'blog-item';
            div.innerHTML = `
              <span>${cat.name}</span>
              <button onclick="deleteCategory('${cat._id}')" style="background:#dc3545;color:#fff;border:none;padding:6px 14px;border-radius:3px;float:right;">Delete</button>
              <button onclick="viewCategory('${cat._id}')" style="background:#17a2b8;color:#fff;border:none;padding:6px 14px;border-radius:3px;float:right;margin-right:8px;" title="View/Edit"><span style='font-size:16px;'>&#128065;</span></button>
            `;
            panel.appendChild(div);
          });
        } else {
          panel.innerHTML = '<div style="color:red">No categories found.</div>';
        }
      } catch (err) {
        document.getElementById('categoryListPanel').innerHTML = '<div style="color:red">Failed to load categories.</div>';
      }
    }
    async function deleteCategory(id) {
      if (!confirm('Are you sure you want to delete this category?')) return;
      try {
        const res = await fetch(`/delete-category?id=${id}`, {
          method: 'DELETE',
          headers: getAuthHeaders()
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        if (data.status) {
          fetchCategories();
        } else {
          alert((data.errors && data.errors[0] && data.errors[0].msg) || 'Failed to delete category');
        }
      } catch (err) {
        alert('Failed to delete category');
      }
    }

    // Add viewCategory function for edit mode
    async function viewCategory(id) {
      try {
        const res = await fetch(`/view-category?id=${id}`, {
          headers: getAuthHeaders()
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        if (data.status && data.category) {
          // Show form and fill with category data
          document.getElementById('categoryListPanel').style.display = 'none';
          document.getElementById('categoryFormPanel').style.display = 'block';
          document.getElementById('categoryName').value = data.category.name || '';
          document.getElementById('createCategoryForm').setAttribute('data-edit-id', data.category._id);
        } else {
          alert((data.errors && data.errors[0] && data.errors[0].msg) || 'Failed to load category');
        }
      } catch (err) {
        alert('Failed to load category');
      }
    }

    // Update category form submit for edit mode
    document.getElementById('createCategoryForm').onsubmit = async function(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const editId = form.getAttribute('data-edit-id');
      let url = '/create-category';
      let method = 'POST';
      if (editId) {
        url = '/edit-category';
        method = 'POST';
        formData.append('id', editId);
      }
      try {
        const res = await fetch(url, {
          method: method,
          headers: getAuthHeaders(),
          body: formData
        });
        const data = await res.json();
        if (handleAuthError(data)) return;
        if (data.status) {
          form.reset();
          form.removeAttribute('data-edit-id');
          document.getElementById('categoryFormPanel').style.display = 'none';
          document.getElementById('categoryListPanel').style.display = 'block';
          fetchCategories();
        } else {
          alert((data.errors && data.errors[0] && data.errors[0].msg) || 'Failed to save category');
        }
      } catch (err) {
        alert('Failed to save category');
      }
    };

    // Initial fetch
    fetchBlogs();
  </script>
</body>
</html>
